<#@ assembly name="System.Core"
#><#@ assembly name="System.Data.Linq"
#><#@ assembly name="EnvDTE"
#><#@ assembly name="System.Xml"
#><#@ assembly name="System.Xml.Linq"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Text"
#><#@ import namespace="Microsoft.VisualStudio.TextTemplating"
#><#+

// EFDesigner v1.2.6.7
// Copyright (c) 2017-2018 Michael Sawczyn
// https://github.com/msawczyn/EFDesigner
//
// based on code from
// https://raw.github.com/damieng/DamienGKit
// http://damieng.com/blog/2009/11/06/multiple-outputs-from-t4-made-easy-revisited

// Manager class records the various blocks so it can split them up
class Manager
{
   private class Block
   {
      public string Name;
      public int Start, Length;
      public bool IncludeInDefault;
   }

   private Block currentBlock;
   private readonly List<Block> files = new List<Block>();
   private readonly Block footer = new Block();
   private readonly Block header = new Block();
   private readonly ITextTemplatingEngineHost host;
   private readonly StringBuilder template;
   protected readonly List<string> generatedFileNames = new List<string>();

   public static Manager Create(ITextTemplatingEngineHost host, StringBuilder template)
   {
      return (host is IServiceProvider) ? new VSManager(host, template) : new Manager(host, template);
   }

   public string FileNameMarker { get; set; }

   public void StartNewFile(string name)
   {
      if (name == null)
         throw new ArgumentNullException("name");
      CurrentBlock = new Block { Name = name };
   }

   public void StartFooter(bool includeInDefault = true)
   {
      CurrentBlock = footer;
      footer.IncludeInDefault = includeInDefault;
   }

   public void StartHeader(bool includeInDefault = true)
   {
      CurrentBlock = header;
      header.IncludeInDefault = includeInDefault;
   }

   public void EndBlock()
   {
      if (CurrentBlock == null)
         return;
      CurrentBlock.Length = template.Length - CurrentBlock.Start;
      if (CurrentBlock != header && CurrentBlock != footer)
         files.Add(CurrentBlock);
      currentBlock = null;
   }

   public virtual string OutputPath {
      get { return Path.GetDirectoryName(host.TemplateFile); }
   }

   public virtual void Process(bool split)
   {
      if (split)
      {
         EndBlock();
         string headerText = template.ToString(header.Start, header.Length);
         string footerText = template.ToString(footer.Start, footer.Length);
         files.Reverse();
         if (!footer.IncludeInDefault)
            template.Remove(footer.Start, footer.Length);

         foreach (Block block in files)
         {
            string fileName = Path.Combine(OutputPath, block.Name);
            string directoryPrefix = block.Name.IndexOf('\\') > -1 ? block.Name.Substring(0, block.Name.LastIndexOf('\\')) : ".";
            string content = headerText + template.ToString(block.Start, block.Length) + footerText;
            generatedFileNames.Add(fileName);
            CreateFile(fileName, content);
            template.Remove(block.Start, block.Length);
         }

         if (!header.IncludeInDefault)
            template.Remove(header.Start, header.Length);
      }
   }

   protected virtual void CreateFile(string fileName, string content)
   {
      if (IsFileContentDifferent(fileName, content))
         File.WriteAllText(fileName, content);
   }

   public virtual string GetCustomToolNamespace(string fileName)
   {
      return null;
   }

   public virtual string DefaultProjectNamespace
   {
      get { return null; }
   }

   protected bool IsFileContentDifferent(string fileName, string newContent)
   {
      return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
   }

   private Manager(ITextTemplatingEngineHost host, StringBuilder template)
   {
      this.host = host;
      this.template = template;
      this.FileNameMarker = "generated";
   }

   private Block CurrentBlock
   {
      get { return currentBlock; }
      set
      {
         if (CurrentBlock != null)
            EndBlock();
         if (value != null)
            value.Start = template.Length;
         currentBlock = value;
      }
   }

   private class VSManager : Manager
   {
      private readonly EnvDTE.ProjectItem templateProjectItem;
      private readonly EnvDTE.DTE dte;

      public override string DefaultProjectNamespace
      {
         get { return templateProjectItem.ContainingProject.Properties.Item("DefaultNamespace").Value.ToString(); }
      }

      internal VSManager(ITextTemplatingEngineHost host, StringBuilder template) : base(host, template)
      {
         IServiceProvider hostServiceProvider = (IServiceProvider)host;
         if (hostServiceProvider == null)
            throw new ArgumentNullException("Could not obtain IServiceProvider");

         dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
         if (dte == null)
            throw new ArgumentNullException("Could not obtain DTE from host");

         templateProjectItem = dte.Solution.FindProjectItem(host.TemplateFile);
      }

      public override void Process(bool split)
      {
         if (templateProjectItem.ProjectItems == null)
            return;

         base.Process(split);
         ProjectSync(generatedFileNames);
      }

      protected override void CreateFile(string fileName, string content)
      {
         if (IsFileContentDifferent(fileName, content))
         {
            if (!Directory.Exists(Path.GetDirectoryName(fileName)))
               Directory.CreateDirectory(Path.GetDirectoryName(fileName));
            CheckoutFileIfRequired(fileName);
            File.WriteAllText(fileName, content);
         }
      }

      public override string OutputPath {
         get { return Path.GetDirectoryName(templateProjectItem.ContainingProject.FullName);}
      }

      private ProjectItem GetOrCreateParentItem(string filePath)
      {
         if (string.IsNullOrEmpty(filePath))
            return templateProjectItem;

         string projectDirectory = Path.GetDirectoryName(templateProjectItem.ContainingProject.FullName);
         string fileDirectory = Path.GetDirectoryName(filePath);

         if (fileDirectory.ToLower() == projectDirectory.ToLower())
            return templateProjectItem;

         ProjectItem result = templateProjectItem;

         string relativeFilePath = fileDirectory.Substring(projectDirectory.Length + 1);
         Queue<string> pathParts = new Queue<string>(relativeFilePath.Split('\\'));
         ProjectItems currentItemList = templateProjectItem.ContainingProject.ProjectItems;
         bool found = false;

         while (pathParts.Any())
         {
            string pathPart = pathParts.Dequeue();

            for (int index = 1; index <= currentItemList.Count; ++index)
            {
               ProjectItem item = currentItemList.Item(index);
               if (item.Kind == Constants.vsProjectItemKindPhysicalFolder && item.Name == pathPart)
               {
                  if (!pathParts.Any())
                     result = item;
                  else
                     currentItemList = item.ProjectItems;

                  found = true;
                  break;
               }
            }

            if (!found)
            {
               ProjectItem newItem = currentItemList.AddFolder(pathPart);
               if (!pathParts.Any())
                  result = newItem;
               else
                  currentItemList = newItem.ProjectItems;
            }
         }

         return result;
      }

      internal void ProjectSync(IEnumerable<string> keepFileNames)
      {
         Dictionary<ProjectItem, List<string>> current = GetCurrentState();
         Dictionary<ProjectItem, List<string>> target = GetTargetState(keepFileNames);

         Dictionary<ProjectItem, List<string>> add = new Dictionary<ProjectItem, List<string>>();
         foreach (ProjectItem parentItem in target.Keys)
         {
            IEnumerable<string> additions = target[parentItem].Except(current.ContainsKey(parentItem) ? current[parentItem] : new List<string>());
            foreach (string addition in additions)
               parentItem.ProjectItems.AddFromFile(addition);
         }

         Dictionary<ProjectItem, List<string>> remove = new Dictionary<ProjectItem, List<string>>();
         foreach (ProjectItem parentItem in current.Keys)
         {
            IEnumerable<string> removals = current[parentItem].Except(target.ContainsKey(parentItem) ? target[parentItem] : new List<string>());
            foreach (string removal in removals)
               dte.Solution.FindProjectItem(removal).Delete();
         }

         List<string> keepUnderTemplate = (target.ContainsKey(templateProjectItem) 
                                             ? target[templateProjectItem] 
                                             : new List<string>()).Select(s => Path.GetFileName(s)).ToList();
         for (int index = 1; index <= templateProjectItem.ProjectItems.Count; ++index)
         {
            if (!keepUnderTemplate.Contains(templateProjectItem.ProjectItems.Item(index).Name))
               templateProjectItem.ProjectItems.Item(index--).Delete();
         }
      }

      private Dictionary<ProjectItem, List<string>> GetTargetState(IEnumerable<string> fileNames)
      {
         Dictionary<ProjectItem, List<string>> result = new Dictionary<ProjectItem, List<string>>();
         result.Add(templateProjectItem, new List<string>());

         foreach (string fileName in fileNames)
         {
            ProjectItem parentItem = GetOrCreateParentItem(fileName);
            if (!result.ContainsKey(parentItem))
               result.Add(parentItem, new List<string>());
            result[parentItem].Add(fileName);
         }

         return result;
      }

      private Dictionary<ProjectItem, List<string>> GetCurrentState()
      {
         Dictionary<ProjectItem, List<string>> result = new Dictionary<ProjectItem, List<string>>();
         Project currentProject = templateProjectItem.ContainingProject;
         string projectDirectory = Path.GetDirectoryName(currentProject.FullName);
         string[] existingGeneratedFiles = Directory.GetFiles(projectDirectory, $"*.{FileNameMarker}.cs", SearchOption.AllDirectories);

         foreach (string fileName in existingGeneratedFiles)
         {
            ProjectItem fileItem = dte.Solution.FindProjectItem(fileName);
            if (fileItem != null)
            {
               ProjectItem parentItem = (ProjectItem)fileItem.Collection.Parent;
               if (!result.ContainsKey(parentItem))
                  result.Add(parentItem, new List<string>());
               result[parentItem].Add(fileName);
            }
         }

         return result;
      }

      private void CheckoutFileIfRequired(string fileName)
      {
         SourceControl sc = dte.SourceControl;
         if (sc != null && sc.IsItemUnderSCC(fileName) && !sc.IsItemCheckedOut(fileName))
            sc.CheckOutItem(fileName);
      }
   }
}

#>